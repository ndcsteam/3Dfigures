<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GeoGebra 3D Figure Viewer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: '#5D5CDE',
                    }
                }
            }
        }
    </script>
    <style>
        .ggb-container {
            min-height: 500px;
            width: 100%;
        }
        @media (max-width: 640px) {
            .ggb-container {
                min-height: 400px;
            }
        }
        .dark .loading-icon {
            border-top-color: #fff;
        }
    </style>
</head>
<body class="bg-white dark:bg-[#181818] text-gray-900 dark:text-gray-100 min-h-screen p-4">
    <div class="max-w-4xl mx-auto">
        <h1 class="text-2xl font-bold text-center mb-4">GeoGebra 3D Figure Viewer</h1>
        
        <div class="bg-gray-100 dark:bg-gray-800 rounded-lg p-4 mb-6">
            <p class="mb-2">Current file: <span class="font-semibold">2425_Test13_Q1.ggb</span></p>
            <div id="fileInfo" class="text-sm text-gray-600 dark:text-gray-400"></div>
        </div>
        
        <div id="appContainer" class="relative border border-gray-300 dark:border-gray-700 rounded-lg overflow-hidden ggb-container mb-6">
            <div id="loading" class="absolute inset-0 flex flex-col items-center justify-center bg-white dark:bg-gray-900 bg-opacity-90 dark:bg-opacity-90 z-10">
                <div class="loading-icon w-10 h-10 border-4 border-gray-300 dark:border-gray-700 border-t-primary rounded-full animate-spin mb-4"></div>
                <p id="loadingText">Loading GeoGebra applet...</p>
            </div>
            <div id="ggbApplet" class="w-full h-full"></div>
        </div>
        
        <div id="cspMessage" class="hidden bg-yellow-100 dark:bg-yellow-900 border-l-4 border-yellow-500 text-yellow-700 dark:text-yellow-300 p-4 mb-6" role="alert">
            <p class="font-bold">GeoGebra API Restricted</p>
            <p>The GeoGebra API is restricted by the Content Security Policy. You may need to allow external resources when prompted to enable the full functionality.</p>
        </div>
        
        <div class="flex flex-wrap gap-2 justify-center">
            <button id="rotateBtn" class="px-4 py-2 bg-primary text-white rounded hover:bg-opacity-90 transition-all disabled:opacity-50 disabled:cursor-not-allowed">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v3.586L7.707 9.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 10.586V7z" clip-rule="evenodd" />
                </svg>
                Rotate View
            </button>
            <button id="resetBtn" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white rounded hover:bg-opacity-90 transition-all disabled:opacity-50 disabled:cursor-not-allowed">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                </svg>
                Reset View
            </button>
        </div>
    </div>

    <script>
        // Dark mode detection
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (event.matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        });
        
        // GeoGebra app handling
        let ggbApp = null;
        const buttons = document.querySelectorAll('button');
        const loadingElement = document.getElementById('loading');
        const fileInfoElement = document.getElementById('fileInfo');
        const cspMessageElement = document.getElementById('cspMessage');
        const loadingTextElement = document.getElementById('loadingText');
        
        // Disable buttons until applet is loaded
        buttons.forEach(button => button.disabled = true);
        
        // Try to load GeoGebra API
        try {
            // First attempt to load from a CDN that's allowed in the CSP
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/geogebra/deployggb.js';
            script.onerror = () => {
                // If loading fails, show CSP message
                cspMessageElement.classList.remove('hidden');
                loadingTextElement.innerHTML = 'Failed to load GeoGebra API.<br>Please allow external resources if prompted.';
                
                // Try with direct GeoGebra CDN (may be blocked by CSP)
                const fallbackScript = document.createElement('script');
                fallbackScript.src = 'https://www.geogebra.org/apps/deployggb.js';
                fallbackScript.onerror = () => {
                    loadingTextElement.innerHTML = 'Failed to load GeoGebra API.<br>Please try refreshing and allowing external resources.';
                };
                fallbackScript.onload = initGeoGebra;
                document.head.appendChild(fallbackScript);
            };
            script.onload = initGeoGebra;
            document.head.appendChild(script);
        } catch (error) {
            console.error('Error loading GeoGebra API:', error);
            loadingTextElement.innerHTML = 'Error loading GeoGebra API.<br>Please try refreshing and allowing external resources.';
            cspMessageElement.classList.remove('hidden');
        }
        
        function initGeoGebra() {
            const fileName = "2425_Test13_Q1.ggb";
            fileInfoElement.textContent = "Note: This viewer attempts to load GeoGebra files from the default GeoGebra material platform.";
            
            const params = {
                "appName": "3d",
                "width": 800,
                "height": 500,
                "showToolBar": false,
                "showAlgebraInput": false,
                "showMenuBar": false,
                "enableRightClick": true,
                "enableShiftDragZoom": true,
                "enableLabelDrags": false,
                "showResetIcon": false,
                "scaleContainerClass": "ggb-container",
                "autoHeight": true,
                "material_id": fileName,
                "errorDialogsActive": false
            };
            
            try {
                if (typeof GGBApplet === 'function') {
                    const applet = new GGBApplet(params, true);
                    applet.inject("ggbApplet", "preferHTML5");
                    
                    window.onGGBReady = function() {
                        ggbApp = document.ggbApplet;
                        loadingElement.style.display = 'none';
                        buttons.forEach(button => button.disabled = false);
                    };
                    
                    // Set a timeout to check if loading is taking too long
                    setTimeout(() => {
                        if (!document.ggbApplet) {
                            loadingTextElement.innerHTML = 'Loading is taking longer than expected.<br>The file may not be accessible.';
                        }
                    }, 10000);
                } else {
                    loadingTextElement.innerHTML = 'GeoGebra API not properly loaded.<br>Please try refreshing and allowing external resources.';
                    cspMessageElement.classList.remove('hidden');
                }
            } catch (error) {
                console.error('Error initializing GeoGebra:', error);
                loadingTextElement.innerHTML = 'Error initializing GeoGebra.<br>Please try refreshing.';
            }
        }
        
        // Button event handlers
        document.getElementById('rotateBtn').addEventListener('click', () => {
            if (ggbApp) {
                try {
                    ggbApp.evalCommand('RotateView[(1,1,1)]');
                } catch (e) {
                    console.error('Error rotating view:', e);
                }
            }
        });
        
        document.getElementById('resetBtn').addEventListener('click', () => {
            if (ggbApp) {
                try {
                    ggbApp.reset();
                } catch (e) {
                    console.error('Error resetting view:', e);
                }
            }
        });
    </script>
</body>
</html>
